buildscript {
    ext.repos = {
        mavenCentral()
        mavenLocal()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://repository.axelor.com/nexus/public/' }
    }
    repositories repos
    dependencies {
        classpath "com.axelor:axelor-gradle:5.0.4"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:3.13.0"
    }
}

allprojects {
    repositories repos
}

apply plugin: 'eclipse'
apply plugin: "com.axelor.app"
apply plugin: "com.diffplug.gradle.spotless"

spotless {
    java {
        googleJavaFormat()
    }
}

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: "com.diffplug.gradle.spotless"

    group = "com.axelor"
    version = rootProject.file("version.txt").text.trim()
    afterEvaluate { generateCode.finalizedBy( tasks.getByName('spotlessApply') ) }
    
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    idea {
        module {
            inheritOutputDirs = true
        }
    }
}

def modules = new File('modules/abs').listFiles().findAll { dir ->
    new File(dir, 'build.gradle').exists() && (
            dir.name.startsWith('axelor-') &&
                    !dir.name.endsWith('-business-production') &&
                    // !dir.name.endsWith('-business-project') &&
                    !dir.name.endsWith('-business-support') &&
                    !dir.name.endsWith('-cash-management') &&
                    !dir.name.endsWith('-client-portal') &&
                    !dir.name.endsWith('-fleet') &&
                    !dir.name.endsWith('-helpdesk') &&
                    !dir.name.endsWith('-marketing') &&
                    !dir.name.endsWith('-production') &&
                    !dir.name.endsWith('-mobile') &&
                    //!dir.name.endsWith('-purchase') &&
                    !dir.name.endsWith('-quality') &&
                    //!dir.name.endsWith('-stock') &&
                    !dir.name.endsWith('-supplier-management') &&
                    //!dir.name.endsWith('-supplychain') &&
                    !dir.name.endsWith('-talent')
    )
}

modules.addAll(new File('modules').listFiles().findAll {
    dir -> new File(dir, 'build.gradle').exists()
})

axelor {
    title "Traversier :: ERP"
    description "Traversier Entreprise Application"

    modules.each { dir ->
        install "$dir.name"
    }
}

dependencies {
    modules.each { dir ->
        compile project(":modules:$dir.name")
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = "4.4.1"
}

task("dataImport", type: JavaExec) {
    main = "com.axelor.apps.erp.Main"
    classpath = sourceSets.main.runtimeClasspath
    if (System.getProperty("exec.args") != null) {
        args System.getProperty("exec.args").split()
    }
}

build.doLast {
    archiveReports.execute()
    archiveImages.execute()
}


task archiveReports(type: Zip) {
    from 'modules/abs'
    include '*/src/main/resources/reports/*'
    classifier 'reports'
    eachFile { fileCopyDetails ->
        fileCopyDetails.path = fileCopyDetails.path.replaceAll(".*/src/main/resources/reports/", '')
    }
    includeEmptyDirs = false
    destinationDir = new File("$buildDir/libs")
}

task archiveImages(type: Zip) {
    from 'modules/abs'
    include '*/src/main/resources/data-demo/img/**'
    include '*/src/main/resources/data-init/img/**'
    classifier 'img'
    eachFile { fileCopyDetails ->
        fileCopyDetails.path = fileCopyDetails.path.replaceAll(".*/src/main/resources/data-demo/img/", '').replaceAll(".*/src/main/resources/data-init/img/", "")
    }
    destinationDir = new File("$buildDir/libs")
    includeEmptyDirs = false
}

war {
  archiveName 'traversier-erp.war'
}
